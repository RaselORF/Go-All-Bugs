--- /workspace/source/ft/os/87-pass-taint-to-caller-param-map-value/src.go
+++ /workspace/source/ft/os/87-pass-taint-to-caller-param-map-value/src.go
@@ -24,6 +24,30 @@
 func foo(mp map[string]string) {
 	for _, val := range mp {
 		cmd := exec.Command(val)
+		// OpenRefactory Warning:
+		// Possible OS Command Injection!
+		// Path:
+		//	File: src.go, Line: 19
+		//		vals := req.URL.Query()
+		//		Variable 'vals' is assigned a tainted value which is passed through a function call.
+		//	File: src.go, Line: 20
+		//		cmdName := vals.Get("cmd")
+		//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
+		//	File: src.go, Line: 21
+		//		mp["command"] = cmdName
+		//		Variable 'mp["command"]' is assigned a tainted value.
+		//	File: src.go, Line: 15
+		//		foo(ss)
+		//		Tainted information is passed through the function call via 'ss' to the parameter 'mp' through the 'value' of the map
+		//	File: src.go, Line: 25
+		//		for _, val := range mp {
+		//		Variable 'val' is assigned a tainted value.
+		//	File: src.go, Line: 26
+		//		cmd := exec.Command(val)
+		//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
+		//	File: src.go, Line: 27
+		//		cmd.Run()
+		//		Tainted information is used in a sink.
 		cmd.Run()
 	}
 }
